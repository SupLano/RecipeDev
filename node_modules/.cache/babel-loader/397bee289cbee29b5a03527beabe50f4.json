{"ast":null,"code":"'use strict';\n\nconst globalOptions = require('./common-options/global');\nconst serviceOptions = require('./common-options/service');\nconst awsServiceOptions = require('./common-options/aws-service');\nconst commands = module.exports = new Map();\ncommands.commonOptions = globalOptions;\ncommands.set('', {\n  usage: 'Interactive Quickstart',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  options: {\n    'help-interactive': {\n      usage: 'Show this message',\n      type: 'boolean'\n    },\n    'name': {\n      usage: 'Name for the service.'\n    },\n    'template': {\n      usage: 'Name of template for the service.'\n    },\n    'template-path': {\n      usage: 'Template local path for the service.'\n    },\n    'template-url': {\n      usage: 'Template url for the service.'\n    },\n    'console': {\n      usage: 'Enable Serverless Console integration. See: http://slss.io/console',\n      type: 'boolean'\n    }\n  },\n  lifecycleEvents: ['initializeService', 'setupAws', 'autoUpdate', 'end']\n});\ncommands.set('config', {\n  usage: 'Configure Serverless',\n  options: {\n    autoupdate: {\n      usage: 'Turn on auto update mechanism (turn off via \"--no-autoupdate\")',\n      type: 'boolean'\n    }\n  },\n  lifecycleEvents: ['config']\n});\ncommands.set('config credentials', {\n  usage: 'Configures a new provider profile for the Serverless Framework',\n  hasAwsExtension: true,\n  options: {\n    provider: {\n      usage: 'Name of the provider. Supported providers: aws',\n      required: true,\n      shortcut: 'p'\n    },\n    key: {\n      usage: 'Access key for the provider',\n      shortcut: 'k',\n      required: true\n    },\n    secret: {\n      usage: 'Secret key for the provider',\n      shortcut: 's',\n      required: true\n    },\n    profile: {\n      usage: 'Name of the profile you wish to create. Defaults to \"default\"',\n      shortcut: 'n'\n    },\n    overwrite: {\n      usage: 'Overwrite the existing profile configuration in the credentials file',\n      shortcut: 'o',\n      type: 'boolean'\n    }\n  },\n  lifecycleEvents: ['config']\n});\ncommands.set('create', {\n  usage: 'Create new Serverless service',\n  options: {\n    'template': {\n      usage: 'Template for the service. Available templates: ' + `${require('../../templates/recommended-list/human-readable')}`,\n      shortcut: 't'\n    },\n    'template-url': {\n      usage: 'Template URL for the service. Supports: GitHub, BitBucket',\n      shortcut: 'u'\n    },\n    'template-path': {\n      usage: 'Template local path for the service.'\n    },\n    'path': {\n      usage: 'The path where the service should be created (e.g. --path my-service)',\n      shortcut: 'p'\n    },\n    'name': {\n      usage: 'Name for the service. Overwrites the default name of the created service.',\n      shortcut: 'n'\n    }\n  },\n  lifecycleEvents: ['create']\n});\ncommands.set('dashboard', {\n  usage: 'Open the Serverless dashboard',\n  lifecycleEvents: ['dashboard'],\n  serviceDependencyMode: 'optional'\n});\ncommands.set('doctor', {\n  usage: 'Print status on reported deprecations triggered in the last command run'\n});\ncommands.set('generate-event', {\n  usage: 'Generate event',\n  lifecycleEvents: ['generate-event'],\n  options: {\n    type: {\n      usage: 'Specify event type. \"aws:apiGateway\", \"aws:sns\", \"aws:sqs\", \"aws:dynamo\", ' + '\"aws:kinesis\", \"aws:cloudWatchLog\", \"aws:s3\", \"aws:alexaSmartHome\", \"aws:alexaSkill\", ' + '\"aws:cloudWatch\", \"aws:iot\", \"aws:cognitoUserPool\",\"aws:websocket\" are supported.',\n      shortcut: 't',\n      required: true\n    },\n    body: {\n      usage: 'Specify the body for the message, request, or stream event.',\n      shortcut: 'b'\n    }\n  }\n});\ncommands.set('help', {\n  usage: 'Show this help',\n  serviceDependencyMode: 'optional'\n});\ncommands.set('install', {\n  usage: 'Install a Serverless service from GitHub or a plugin from the Serverless registry',\n  options: {\n    url: {\n      usage: 'URL of the Serverless service on GitHub',\n      required: true,\n      shortcut: 'u'\n    },\n    name: {\n      usage: 'Name for the service',\n      shortcut: 'n'\n    }\n  },\n  lifecycleEvents: ['install']\n});\ncommands.set('login', {\n  usage: 'Login or sign up for Serverless',\n  serviceDependencyMode: 'optional',\n  lifecycleEvents: ['login'],\n  options: {\n    console: {\n      usage: 'Login into Serverless Console. See: http://slss.io/console',\n      type: 'boolean'\n    },\n    dashboard: {\n      usage: 'Login into Serverless Dashboard',\n      type: 'boolean'\n    }\n  }\n});\ncommands.set('logout', {\n  usage: 'Logout from Serverless',\n  serviceDependencyMode: 'optional',\n  lifecycleEvents: ['logout']\n});\ncommands.set('output get', {\n  usage: 'Get value of dashboard deployment profile parameter',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  options: {\n    name: {\n      usage: 'Ouptut name',\n      required: true\n    },\n    service: {\n      usage: 'Dashboard service'\n    }\n  },\n  lifecycleEvents: ['get']\n});\ncommands.set('output list', {\n  usage: 'List all dashboard deployment profile parameters',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  options: {\n    service: {\n      usage: 'Dashboard service'\n    }\n  },\n  lifecycleEvents: ['list']\n});\ncommands.set('param get', {\n  usage: 'Get value of dashboard service output',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  options: {\n    name: {\n      usage: 'Ouptut name',\n      required: true\n    }\n  },\n  lifecycleEvents: ['get']\n});\ncommands.set('param list', {\n  usage: 'List all dashboard deployment profile parameters',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  lifecycleEvents: ['list']\n});\ncommands.set('plugin list', {\n  usage: 'Lists all available plugins',\n  lifecycleEvents: ['list']\n});\ncommands.set('plugin search', {\n  usage: 'Search for plugins',\n  options: {\n    query: {\n      usage: 'Search query',\n      required: true,\n      shortcut: 'q'\n    }\n  },\n  lifecycleEvents: ['search']\n});\ncommands.set('slstats', {\n  usage: 'Enable or disable stats',\n  options: {\n    enable: {\n      usage: 'Enable stats (\"--enable\")',\n      shortcut: 'e',\n      type: 'boolean'\n    },\n    disable: {\n      usage: 'Disable stats (\"--disable\")',\n      shortcut: 'd',\n      type: 'boolean'\n    }\n  },\n  lifecycleEvents: ['slstats']\n});\n(() => {\n  const isHidden = !require('../../utils/is-standalone-executable') || process.platform === 'win32';\n  const noSupportNotice = \"It's applicable only in context of a standalone executable instance \" + 'in non Windows environment.';\n  commands.set('upgrade', {\n    usage: 'Upgrade Serverless',\n    isHidden,\n    noSupportNotice,\n    options: {\n      major: {\n        usage: 'Enable upgrade to a new major release',\n        type: 'boolean'\n      }\n    },\n    lifecycleEvents: ['upgrade']\n  });\n  commands.set('uninstall', {\n    usage: 'Uninstall Serverless',\n    isHidden,\n    noSupportNotice,\n    lifecycleEvents: ['uninstall']\n  });\n})();\nfor (const [name, schema] of commands) {\n  if (!schema.options) schema.options = {};\n  for (const optionSchema of Object.values(schema.options)) {\n    if (!optionSchema.type) optionSchema.type = 'string';\n  }\n  if (schema.serviceDependencyMode) {\n    Object.assign(schema.options, schema.hasAwsExtension ? awsServiceOptions : serviceOptions);\n  } else {\n    Object.assign(schema.options, globalOptions);\n  }\n  if (!name) {\n    // Necessary tweaks for Interactive CLI help\n    schema.options.help = {\n      ...schema.options.help,\n      usage: 'Show general help info'\n    };\n    schema.options.version = {\n      ...schema.options.version,\n      shortcut: 'v'\n    };\n  }\n}","map":{"version":3,"names":["globalOptions","require","serviceOptions","awsServiceOptions","commands","module","exports","Map","commonOptions","set","usage","serviceDependencyMode","hasAwsExtension","options","type","lifecycleEvents","autoupdate","provider","required","shortcut","key","secret","profile","overwrite","body","url","name","console","dashboard","service","query","enable","disable","isHidden","process","platform","noSupportNotice","major","schema","optionSchema","Object","values","assign","help","version"],"sources":["/Users/user/Downloads/node_modules/serverless/lib/cli/commands-schema/no-service.js"],"sourcesContent":["'use strict';\n\nconst globalOptions = require('./common-options/global');\nconst serviceOptions = require('./common-options/service');\nconst awsServiceOptions = require('./common-options/aws-service');\n\nconst commands = (module.exports = new Map());\n\ncommands.commonOptions = globalOptions;\n\ncommands.set('', {\n  usage: 'Interactive Quickstart',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  options: {\n    'help-interactive': { usage: 'Show this message', type: 'boolean' },\n    'name': {\n      usage: 'Name for the service.',\n    },\n    'template': {\n      usage: 'Name of template for the service.',\n    },\n    'template-path': {\n      usage: 'Template local path for the service.',\n    },\n    'template-url': {\n      usage: 'Template url for the service.',\n    },\n    'console': {\n      usage: 'Enable Serverless Console integration. See: http://slss.io/console',\n      type: 'boolean',\n    },\n  },\n  lifecycleEvents: ['initializeService', 'setupAws', 'autoUpdate', 'end'],\n});\n\ncommands.set('config', {\n  usage: 'Configure Serverless',\n  options: {\n    autoupdate: {\n      usage: 'Turn on auto update mechanism (turn off via \"--no-autoupdate\")',\n      type: 'boolean',\n    },\n  },\n  lifecycleEvents: ['config'],\n});\n\ncommands.set('config credentials', {\n  usage: 'Configures a new provider profile for the Serverless Framework',\n  hasAwsExtension: true,\n  options: {\n    provider: {\n      usage: 'Name of the provider. Supported providers: aws',\n      required: true,\n      shortcut: 'p',\n    },\n    key: {\n      usage: 'Access key for the provider',\n      shortcut: 'k',\n      required: true,\n    },\n    secret: {\n      usage: 'Secret key for the provider',\n      shortcut: 's',\n      required: true,\n    },\n    profile: {\n      usage: 'Name of the profile you wish to create. Defaults to \"default\"',\n      shortcut: 'n',\n    },\n    overwrite: {\n      usage: 'Overwrite the existing profile configuration in the credentials file',\n      shortcut: 'o',\n      type: 'boolean',\n    },\n  },\n  lifecycleEvents: ['config'],\n});\n\ncommands.set('create', {\n  usage: 'Create new Serverless service',\n  options: {\n    'template': {\n      usage:\n        'Template for the service. Available templates: ' +\n        `${require('../../templates/recommended-list/human-readable')}`,\n      shortcut: 't',\n    },\n    'template-url': {\n      usage: 'Template URL for the service. Supports: GitHub, BitBucket',\n      shortcut: 'u',\n    },\n    'template-path': {\n      usage: 'Template local path for the service.',\n    },\n    'path': {\n      usage: 'The path where the service should be created (e.g. --path my-service)',\n      shortcut: 'p',\n    },\n    'name': {\n      usage: 'Name for the service. Overwrites the default name of the created service.',\n      shortcut: 'n',\n    },\n  },\n  lifecycleEvents: ['create'],\n});\n\ncommands.set('dashboard', {\n  usage: 'Open the Serverless dashboard',\n  lifecycleEvents: ['dashboard'],\n  serviceDependencyMode: 'optional',\n});\n\ncommands.set('doctor', {\n  usage: 'Print status on reported deprecations triggered in the last command run',\n});\n\ncommands.set('generate-event', {\n  usage: 'Generate event',\n  lifecycleEvents: ['generate-event'],\n  options: {\n    type: {\n      usage:\n        'Specify event type. \"aws:apiGateway\", \"aws:sns\", \"aws:sqs\", \"aws:dynamo\", ' +\n        '\"aws:kinesis\", \"aws:cloudWatchLog\", \"aws:s3\", \"aws:alexaSmartHome\", \"aws:alexaSkill\", ' +\n        '\"aws:cloudWatch\", \"aws:iot\", \"aws:cognitoUserPool\",\"aws:websocket\" are supported.',\n      shortcut: 't',\n      required: true,\n    },\n    body: {\n      usage: 'Specify the body for the message, request, or stream event.',\n      shortcut: 'b',\n    },\n  },\n});\n\ncommands.set('help', {\n  usage: 'Show this help',\n  serviceDependencyMode: 'optional',\n});\n\ncommands.set('install', {\n  usage: 'Install a Serverless service from GitHub or a plugin from the Serverless registry',\n  options: {\n    url: {\n      usage: 'URL of the Serverless service on GitHub',\n      required: true,\n      shortcut: 'u',\n    },\n    name: {\n      usage: 'Name for the service',\n      shortcut: 'n',\n    },\n  },\n  lifecycleEvents: ['install'],\n});\n\ncommands.set('login', {\n  usage: 'Login or sign up for Serverless',\n  serviceDependencyMode: 'optional',\n  lifecycleEvents: ['login'],\n  options: {\n    console: {\n      usage: 'Login into Serverless Console. See: http://slss.io/console',\n      type: 'boolean',\n    },\n    dashboard: {\n      usage: 'Login into Serverless Dashboard',\n      type: 'boolean',\n    },\n  },\n});\n\ncommands.set('logout', {\n  usage: 'Logout from Serverless',\n  serviceDependencyMode: 'optional',\n  lifecycleEvents: ['logout'],\n});\n\ncommands.set('output get', {\n  usage: 'Get value of dashboard deployment profile parameter',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  options: {\n    name: { usage: 'Ouptut name', required: true },\n    service: { usage: 'Dashboard service' },\n  },\n  lifecycleEvents: ['get'],\n});\n\ncommands.set('output list', {\n  usage: 'List all dashboard deployment profile parameters',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  options: {\n    service: { usage: 'Dashboard service' },\n  },\n  lifecycleEvents: ['list'],\n});\n\ncommands.set('param get', {\n  usage: 'Get value of dashboard service output',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  options: {\n    name: { usage: 'Ouptut name', required: true },\n  },\n  lifecycleEvents: ['get'],\n});\n\ncommands.set('param list', {\n  usage: 'List all dashboard deployment profile parameters',\n  serviceDependencyMode: 'optional',\n  hasAwsExtension: true,\n  lifecycleEvents: ['list'],\n});\n\ncommands.set('plugin list', {\n  usage: 'Lists all available plugins',\n  lifecycleEvents: ['list'],\n});\n\ncommands.set('plugin search', {\n  usage: 'Search for plugins',\n  options: {\n    query: {\n      usage: 'Search query',\n      required: true,\n      shortcut: 'q',\n    },\n  },\n  lifecycleEvents: ['search'],\n});\n\ncommands.set('slstats', {\n  usage: 'Enable or disable stats',\n  options: {\n    enable: {\n      usage: 'Enable stats (\"--enable\")',\n      shortcut: 'e',\n      type: 'boolean',\n    },\n    disable: {\n      usage: 'Disable stats (\"--disable\")',\n      shortcut: 'd',\n      type: 'boolean',\n    },\n  },\n  lifecycleEvents: ['slstats'],\n});\n\n(() => {\n  const isHidden = !require('../../utils/is-standalone-executable') || process.platform === 'win32';\n  const noSupportNotice =\n    \"It's applicable only in context of a standalone executable instance \" +\n    'in non Windows environment.';\n\n  commands.set('upgrade', {\n    usage: 'Upgrade Serverless',\n    isHidden,\n    noSupportNotice,\n    options: {\n      major: {\n        usage: 'Enable upgrade to a new major release',\n        type: 'boolean',\n      },\n    },\n    lifecycleEvents: ['upgrade'],\n  });\n  commands.set('uninstall', {\n    usage: 'Uninstall Serverless',\n    isHidden,\n    noSupportNotice,\n    lifecycleEvents: ['uninstall'],\n  });\n})();\n\nfor (const [name, schema] of commands) {\n  if (!schema.options) schema.options = {};\n  for (const optionSchema of Object.values(schema.options)) {\n    if (!optionSchema.type) optionSchema.type = 'string';\n  }\n  if (schema.serviceDependencyMode) {\n    Object.assign(schema.options, schema.hasAwsExtension ? awsServiceOptions : serviceOptions);\n  } else {\n    Object.assign(schema.options, globalOptions);\n  }\n  if (!name) {\n    // Necessary tweaks for Interactive CLI help\n    schema.options.help = { ...schema.options.help, usage: 'Show general help info' };\n    schema.options.version = { ...schema.options.version, shortcut: 'v' };\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACxD,MAAMC,cAAc,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAC1D,MAAME,iBAAiB,GAAGF,OAAO,CAAC,8BAA8B,CAAC;AAEjE,MAAMG,QAAQ,GAAIC,MAAM,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAG;AAE7CH,QAAQ,CAACI,aAAa,GAAGR,aAAa;AAEtCI,QAAQ,CAACK,GAAG,CAAC,EAAE,EAAE;EACfC,KAAK,EAAE,wBAAwB;EAC/BC,qBAAqB,EAAE,UAAU;EACjCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,kBAAkB,EAAE;MAAEH,KAAK,EAAE,mBAAmB;MAAEI,IAAI,EAAE;IAAU,CAAC;IACnE,MAAM,EAAE;MACNJ,KAAK,EAAE;IACT,CAAC;IACD,UAAU,EAAE;MACVA,KAAK,EAAE;IACT,CAAC;IACD,eAAe,EAAE;MACfA,KAAK,EAAE;IACT,CAAC;IACD,cAAc,EAAE;MACdA,KAAK,EAAE;IACT,CAAC;IACD,SAAS,EAAE;MACTA,KAAK,EAAE,oEAAoE;MAC3EI,IAAI,EAAE;IACR;EACF,CAAC;EACDC,eAAe,EAAE,CAAC,mBAAmB,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK;AACxE,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,QAAQ,EAAE;EACrBC,KAAK,EAAE,sBAAsB;EAC7BG,OAAO,EAAE;IACPG,UAAU,EAAE;MACVN,KAAK,EAAE,gEAAgE;MACvEI,IAAI,EAAE;IACR;EACF,CAAC;EACDC,eAAe,EAAE,CAAC,QAAQ;AAC5B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,oBAAoB,EAAE;EACjCC,KAAK,EAAE,gEAAgE;EACvEE,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACPI,QAAQ,EAAE;MACRP,KAAK,EAAE,gDAAgD;MACvDQ,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE;IACZ,CAAC;IACDC,GAAG,EAAE;MACHV,KAAK,EAAE,6BAA6B;MACpCS,QAAQ,EAAE,GAAG;MACbD,QAAQ,EAAE;IACZ,CAAC;IACDG,MAAM,EAAE;MACNX,KAAK,EAAE,6BAA6B;MACpCS,QAAQ,EAAE,GAAG;MACbD,QAAQ,EAAE;IACZ,CAAC;IACDI,OAAO,EAAE;MACPZ,KAAK,EAAE,+DAA+D;MACtES,QAAQ,EAAE;IACZ,CAAC;IACDI,SAAS,EAAE;MACTb,KAAK,EAAE,sEAAsE;MAC7ES,QAAQ,EAAE,GAAG;MACbL,IAAI,EAAE;IACR;EACF,CAAC;EACDC,eAAe,EAAE,CAAC,QAAQ;AAC5B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,QAAQ,EAAE;EACrBC,KAAK,EAAE,+BAA+B;EACtCG,OAAO,EAAE;IACP,UAAU,EAAE;MACVH,KAAK,EACH,iDAAiD,GAChD,GAAET,OAAO,CAAC,iDAAiD,CAAE,EAAC;MACjEkB,QAAQ,EAAE;IACZ,CAAC;IACD,cAAc,EAAE;MACdT,KAAK,EAAE,2DAA2D;MAClES,QAAQ,EAAE;IACZ,CAAC;IACD,eAAe,EAAE;MACfT,KAAK,EAAE;IACT,CAAC;IACD,MAAM,EAAE;MACNA,KAAK,EAAE,uEAAuE;MAC9ES,QAAQ,EAAE;IACZ,CAAC;IACD,MAAM,EAAE;MACNT,KAAK,EAAE,2EAA2E;MAClFS,QAAQ,EAAE;IACZ;EACF,CAAC;EACDJ,eAAe,EAAE,CAAC,QAAQ;AAC5B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,WAAW,EAAE;EACxBC,KAAK,EAAE,+BAA+B;EACtCK,eAAe,EAAE,CAAC,WAAW,CAAC;EAC9BJ,qBAAqB,EAAE;AACzB,CAAC,CAAC;AAEFP,QAAQ,CAACK,GAAG,CAAC,QAAQ,EAAE;EACrBC,KAAK,EAAE;AACT,CAAC,CAAC;AAEFN,QAAQ,CAACK,GAAG,CAAC,gBAAgB,EAAE;EAC7BC,KAAK,EAAE,gBAAgB;EACvBK,eAAe,EAAE,CAAC,gBAAgB,CAAC;EACnCF,OAAO,EAAE;IACPC,IAAI,EAAE;MACJJ,KAAK,EACH,4EAA4E,GAC5E,wFAAwF,GACxF,mFAAmF;MACrFS,QAAQ,EAAE,GAAG;MACbD,QAAQ,EAAE;IACZ,CAAC;IACDM,IAAI,EAAE;MACJd,KAAK,EAAE,6DAA6D;MACpES,QAAQ,EAAE;IACZ;EACF;AACF,CAAC,CAAC;AAEFf,QAAQ,CAACK,GAAG,CAAC,MAAM,EAAE;EACnBC,KAAK,EAAE,gBAAgB;EACvBC,qBAAqB,EAAE;AACzB,CAAC,CAAC;AAEFP,QAAQ,CAACK,GAAG,CAAC,SAAS,EAAE;EACtBC,KAAK,EAAE,mFAAmF;EAC1FG,OAAO,EAAE;IACPY,GAAG,EAAE;MACHf,KAAK,EAAE,yCAAyC;MAChDQ,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE;IACZ,CAAC;IACDO,IAAI,EAAE;MACJhB,KAAK,EAAE,sBAAsB;MAC7BS,QAAQ,EAAE;IACZ;EACF,CAAC;EACDJ,eAAe,EAAE,CAAC,SAAS;AAC7B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,OAAO,EAAE;EACpBC,KAAK,EAAE,iCAAiC;EACxCC,qBAAqB,EAAE,UAAU;EACjCI,eAAe,EAAE,CAAC,OAAO,CAAC;EAC1BF,OAAO,EAAE;IACPc,OAAO,EAAE;MACPjB,KAAK,EAAE,4DAA4D;MACnEI,IAAI,EAAE;IACR,CAAC;IACDc,SAAS,EAAE;MACTlB,KAAK,EAAE,iCAAiC;MACxCI,IAAI,EAAE;IACR;EACF;AACF,CAAC,CAAC;AAEFV,QAAQ,CAACK,GAAG,CAAC,QAAQ,EAAE;EACrBC,KAAK,EAAE,wBAAwB;EAC/BC,qBAAqB,EAAE,UAAU;EACjCI,eAAe,EAAE,CAAC,QAAQ;AAC5B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,YAAY,EAAE;EACzBC,KAAK,EAAE,qDAAqD;EAC5DC,qBAAqB,EAAE,UAAU;EACjCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACPa,IAAI,EAAE;MAAEhB,KAAK,EAAE,aAAa;MAAEQ,QAAQ,EAAE;IAAK,CAAC;IAC9CW,OAAO,EAAE;MAAEnB,KAAK,EAAE;IAAoB;EACxC,CAAC;EACDK,eAAe,EAAE,CAAC,KAAK;AACzB,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,aAAa,EAAE;EAC1BC,KAAK,EAAE,kDAAkD;EACzDC,qBAAqB,EAAE,UAAU;EACjCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACPgB,OAAO,EAAE;MAAEnB,KAAK,EAAE;IAAoB;EACxC,CAAC;EACDK,eAAe,EAAE,CAAC,MAAM;AAC1B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,WAAW,EAAE;EACxBC,KAAK,EAAE,uCAAuC;EAC9CC,qBAAqB,EAAE,UAAU;EACjCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACPa,IAAI,EAAE;MAAEhB,KAAK,EAAE,aAAa;MAAEQ,QAAQ,EAAE;IAAK;EAC/C,CAAC;EACDH,eAAe,EAAE,CAAC,KAAK;AACzB,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,YAAY,EAAE;EACzBC,KAAK,EAAE,kDAAkD;EACzDC,qBAAqB,EAAE,UAAU;EACjCC,eAAe,EAAE,IAAI;EACrBG,eAAe,EAAE,CAAC,MAAM;AAC1B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,aAAa,EAAE;EAC1BC,KAAK,EAAE,6BAA6B;EACpCK,eAAe,EAAE,CAAC,MAAM;AAC1B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,eAAe,EAAE;EAC5BC,KAAK,EAAE,oBAAoB;EAC3BG,OAAO,EAAE;IACPiB,KAAK,EAAE;MACLpB,KAAK,EAAE,cAAc;MACrBQ,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDJ,eAAe,EAAE,CAAC,QAAQ;AAC5B,CAAC,CAAC;AAEFX,QAAQ,CAACK,GAAG,CAAC,SAAS,EAAE;EACtBC,KAAK,EAAE,yBAAyB;EAChCG,OAAO,EAAE;IACPkB,MAAM,EAAE;MACNrB,KAAK,EAAE,2BAA2B;MAClCS,QAAQ,EAAE,GAAG;MACbL,IAAI,EAAE;IACR,CAAC;IACDkB,OAAO,EAAE;MACPtB,KAAK,EAAE,6BAA6B;MACpCS,QAAQ,EAAE,GAAG;MACbL,IAAI,EAAE;IACR;EACF,CAAC;EACDC,eAAe,EAAE,CAAC,SAAS;AAC7B,CAAC,CAAC;AAEF,CAAC,MAAM;EACL,MAAMkB,QAAQ,GAAG,CAAChC,OAAO,CAAC,sCAAsC,CAAC,IAAIiC,OAAO,CAACC,QAAQ,KAAK,OAAO;EACjG,MAAMC,eAAe,GACnB,sEAAsE,GACtE,6BAA6B;EAE/BhC,QAAQ,CAACK,GAAG,CAAC,SAAS,EAAE;IACtBC,KAAK,EAAE,oBAAoB;IAC3BuB,QAAQ;IACRG,eAAe;IACfvB,OAAO,EAAE;MACPwB,KAAK,EAAE;QACL3B,KAAK,EAAE,uCAAuC;QAC9CI,IAAI,EAAE;MACR;IACF,CAAC;IACDC,eAAe,EAAE,CAAC,SAAS;EAC7B,CAAC,CAAC;EACFX,QAAQ,CAACK,GAAG,CAAC,WAAW,EAAE;IACxBC,KAAK,EAAE,sBAAsB;IAC7BuB,QAAQ;IACRG,eAAe;IACfrB,eAAe,EAAE,CAAC,WAAW;EAC/B,CAAC,CAAC;AACJ,CAAC,GAAG;AAEJ,KAAK,MAAM,CAACW,IAAI,EAAEY,MAAM,CAAC,IAAIlC,QAAQ,EAAE;EACrC,IAAI,CAACkC,MAAM,CAACzB,OAAO,EAAEyB,MAAM,CAACzB,OAAO,GAAG,CAAC,CAAC;EACxC,KAAK,MAAM0B,YAAY,IAAIC,MAAM,CAACC,MAAM,CAACH,MAAM,CAACzB,OAAO,CAAC,EAAE;IACxD,IAAI,CAAC0B,YAAY,CAACzB,IAAI,EAAEyB,YAAY,CAACzB,IAAI,GAAG,QAAQ;EACtD;EACA,IAAIwB,MAAM,CAAC3B,qBAAqB,EAAE;IAChC6B,MAAM,CAACE,MAAM,CAACJ,MAAM,CAACzB,OAAO,EAAEyB,MAAM,CAAC1B,eAAe,GAAGT,iBAAiB,GAAGD,cAAc,CAAC;EAC5F,CAAC,MAAM;IACLsC,MAAM,CAACE,MAAM,CAACJ,MAAM,CAACzB,OAAO,EAAEb,aAAa,CAAC;EAC9C;EACA,IAAI,CAAC0B,IAAI,EAAE;IACT;IACAY,MAAM,CAACzB,OAAO,CAAC8B,IAAI,GAAG;MAAE,GAAGL,MAAM,CAACzB,OAAO,CAAC8B,IAAI;MAAEjC,KAAK,EAAE;IAAyB,CAAC;IACjF4B,MAAM,CAACzB,OAAO,CAAC+B,OAAO,GAAG;MAAE,GAAGN,MAAM,CAACzB,OAAO,CAAC+B,OAAO;MAAEzB,QAAQ,EAAE;IAAI,CAAC;EACvE;AACF"},"metadata":{},"sourceType":"script"}